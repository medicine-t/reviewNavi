datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  MyLists     MyLists[]
  ReviewItems ReviewItems[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// -- ここから自分で作ったSchema

model MyLists {
  mylistId    String        @id @default(cuid())
  mylistName  String
  description String?
  isPublic    Boolean       @default(false)
  owner       User          @relation(fields: [ownerId], references: [id])
  ownerId     String
  MyListItems MyListItems[]
}

model MyListItems {
  itemId   String  @id @default(cuid())
  mylist   MyLists @relation(fields: [mylistId], references: [mylistId])
  mylistId String
  storeId  String
}

model ReviewItems {
  reviewId      String @id @default(cuid())
  storeId       String
  reviewComment String
  evaluation    Int
  writer        User   @relation(fields: [writerId], references: [id])
  writerId      String
}
